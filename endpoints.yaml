openapi: 3.0.3
info:
  title: Smartlyrics API
  version: 1.0.0
  description: API for managing song books for groups of players
servers:
  - url: http://localhost:8000
paths:
  /{groupId}/songs/:
    get:
      summary: Get all songs for a group
      operationId: getAllSongs
      responses:
        '200':
          description: List of songs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
    post:
      summary: Add a new song
      operationId: addSong
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSong'
      responses:
        '201':
          description: Song added successfully
        '400':
          description: Invalid request payload
    put:
      summary: update a song
      operationId: updateSong
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSong'
      responses:
        '201':
          description: Song added successfully
        '400':
          description: Invalid request payload
    delete:
      summary: delete a song
      operationId: deleteSong
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSong'
      responses:
        '201':
          description: Song added successfully
        '400':
          description: Invalid request payload
  /books/{id}:
    get:
      summary: Get a book by ID
      operationId: getBookById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Book details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    put:
      summary: Update a book by ID
      operationId: updateBookById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully
        '404':
          description: Book not found
    delete:
      summary: Delete a book by ID
      operationId: deleteBookById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Book deleted successfully
        '404':
          description: Book not found
components:
  schemas:
    Song:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string
        publicationYear:
          type: integer
        capo:
          type: integer
        key:
          string
    NewSong:
      type: object
      properties:
   title:
      type: string
      author:
        type: string
      publicationYear:
        type: integer
      capo:
        type: integer
      key:
        type: string
      
